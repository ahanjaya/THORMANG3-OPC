  ROS_INFO_STREAM(goal_kinematics_left_arr_pose_msg_.time);
  ROS_INFO_STREAM(goal_kinematics_left_arr_pose_msg_.name);
  // ROS_INFO_STREAM(goal_kinematics_left_arr_pose_msg_.pose);
  // ROS_INFO_STREAM(goal_kinematics_left_arr_pose_msg_.pose.poses[0]);
  // ROS_INFO_STREAM(goal_kinematics_left_arr_pose_msg_.pose.poses[0].position.x);

find . -name *.git* -ok rm -Rf {} \;

# Compiled Object files
*.slo
*.lo
*.o
*.pyc

# Compiled Dynamic libraries
*.so
*.dylib

# Compiled Static libraries
*.lai
*.la
*.a

# ROS stuff
.cproject
.project
.pydevproject
.settings
cmake_install.cmake
build/
bin/
lib/
msg_gen/
srv_gen/

# SBPL output:
debug.txt
envdebug.txt

build
devel
bin
lib
msg_gen
srv_gen
qtcreator-build
*~
*.backup
*.user
*.autosave
*.orig
*.rej

build
devel
bin
lib
msg_gen
srv_gen
qtcreator-build
*~
*.backup
*.user
*.autosave
CATKIN_IGNORE

.idea
*~
~*
*.user
*-build/

( find . -type d -name ".git" && find . -name "README.md" && find . -name "LICENSE") | xargs rm -rf
( find . -name "README.md" && find . -name "LICENSE") | xargs rm -r
find . | grep LICENSE | xargs rm -r
find . | grep README.md | xargs rm -r

( find . -type d -name ".git" \
  && find . -name ".gitignore" \
  && find . -name ".gitmodules" ) | xargs rm -rf

def calc_keyboard_frame_position():
    global keyboard_pos
    global l_1st_row, r_1st_row, l_2nd_row, r_2nd_row
    global l_3rd_row, r_3rd_row, l_4th_row, r_4th_row

    keyboard_cfg = load_keyboard_config()

    # load keyboard initial pose in frame coordinate
    init_keyb = (keyboard_cfg['aruco_ref']['cx'], keyboard_cfg['aruco_ref']['cy'])

    l_1st_row = {k: keyboard_cfg['_1st_row'][k] for k in ('1', '2', '3', '4', '5')}  
    r_1st_row = {k: keyboard_cfg['_1st_row'][k] for k in ('6', '7', '8', '9', '0')}  
    l_2nd_row = {k: keyboard_cfg['_2nd_row'][k] for k in ('q', 'w', 'e', 'r', 't')}  
    r_2nd_row = {k: keyboard_cfg['_2nd_row'][k] for k in ('y', 'u', 'i', 'o', 'p')}  
    l_3rd_row = {k: keyboard_cfg['_3rd_row'][k] for k in ('a', 's', 'd', 'f', 'g')}  
    r_3rd_row = {k: keyboard_cfg['_3rd_row'][k] for k in ('h', 'j', 'k', 'l', ';')}  
    l_4th_row = {k: keyboard_cfg['_4th_row'][k] for k in ('z', 'x', 'c', 'v', 'b')}  
    r_4th_row = {k: keyboard_cfg['_4th_row'][k] for k in ('n', 'm', ',', '.', '/')}

    # calculate diff position
    diff_keyb = np.array(keyboard_pos) - np.array(init_keyb)
    # diff_keyb = np.array([0, 0])
    rospy.loginfo('[TY] Differentiate Keyboard {}'.format(diff_keyb))

    # update current position in frame coordinate
    # translate point
    l_1st_row = {key: tuple(np.array(val) + diff_keyb) for key, val in l_1st_row.items()}
    r_1st_row = {key: tuple(np.array(val) + diff_keyb) for key, val in r_1st_row.items()}
    l_2nd_row = {key: tuple(np.array(val) + diff_keyb) for key, val in l_2nd_row.items()}
    r_2nd_row = {key: tuple(np.array(val) + diff_keyb) for key, val in r_2nd_row.items()}
    l_3rd_row = {key: tuple(np.array(val) + diff_keyb) for key, val in l_3rd_row.items()}
    r_3rd_row = {key: tuple(np.array(val) + diff_keyb) for key, val in r_3rd_row.items()}
    l_4th_row = {key: tuple(np.array(val) + diff_keyb) for key, val in l_4th_row.items()}
    r_4th_row = {key: tuple(np.array(val) + diff_keyb) for key, val in r_4th_row.items()}

aruco_ref:
  angle: 1.52
  cx: 540
  cy: 308

  def process(kinematics, k):
    arm  = None

    if k in ikl_1st_row.keys():
        x, y = ikl_1st_row[k]
        if check_singularities(x, y):
            arm  = "left_arm"
            x -= 0.008
            y += 0.005
    elif k in ikl_2nd_row.keys():
        x, y = ikl_2nd_row[k]
        if check_singularities(x, y):
            arm  = "left_arm"
            x -= 0.004
            y += 0.002
    elif k in ikl_3rd_row.keys():
        x, y = ikl_3rd_row[k]
        if check_singularities(x, y):
            arm  = "left_arm"
            y += 0.004
    elif k in ikl_4th_row.keys():
        x, y = ikl_4th_row[k]
        if check_singularities(x, y):
            arm  = "left_arm"
            x += 0.002
            y += 0.002

    elif k in ikr_1st_row.keys():
        x, y = ikr_1st_row[k]
        if check_singularities(x, y):
            arm  = "right_arm"
            x -= 0.015
    elif k in ikr_2nd_row.keys():
        x, y = ikr_2nd_row[k]
        if check_singularities(x, y):
            arm  = "right_arm"
            x -= 0.013
    elif k in ikr_3rd_row.keys():
        x, y = ikr_3rd_row[k]
        if check_singularities(x, y):    
            arm  = "right_arm"
            x -= 0.01
    elif k in ikr_4th_row.keys():
        x, y = ikr_4th_row[k]
        if check_singularities(x, y):
            arm  = "right_arm"
            x -= 0.006

    if arm != None:
        rospy.loginfo('[TY] {}, X : {} Y : {} '.format(arm, x, y))
        if arm == "left_arm":
            z = 0.72

            # check right arm distance
            yr   = kinematics.get_kinematics_pose("right_arm").get('y')
            dist = abs(y - yr)
            if dist <= 0.08:
                move_arm(kinematics, 'right_arm', 2.0, x=0.25, y=-0.15, z=0.77)
            
        elif arm == "right_arm":
            z = 0.73
            
            # check left arm distance
            yl   = kinematics.get_kinematics_pose("left_arm").get('y')
            dist = abs(y - yl)
            if dist <= 0.08:
                move_arm(kinematics, 'left_arm', 2.0, x=0.25, y=0.15, z=0.75)

        if check_arm(kinematics, arm, x, y) == False:
            move_arm(kinematics, arm, 2.0, x, y, z)
    else:
        rospy.logwarn('[TY] Key : {} is out of workspace'.format(k))

def typing(kinematics, arm):
    global prev_ik, z_typing

    if arm == 'left_arm':
        move_arm(kinematics, arm, 0.5, prev_ik[0], prev_ik[1], prev_ik[2]-0.02)  # 0.02
        wait_robot(kinematics, "End Left Arm Trajectory")
        move_arm(kinematics, arm, 0.5, prev_ik[0], prev_ik[1], prev_ik[2]+0.02)
    elif arm == 'right_arm':
        move_arm(kinematics, arm, 0.5, prev_ik[0], prev_ik[1], prev_ik[2]-0.016) # 0.016
        wait_robot(kinematics, "End Right Arm Trajectory")
        move_arm(kinematics, arm, 0.5, prev_ik[0], prev_ik[1], prev_ik[2]+0.016)


_1st_row:
  '-': !!python/tuple
  - 390
  - 322
  '0': !!python/tuple
  - 373
  - 322
  '1': !!python/tuple
  - 225
  - 322
  '2': !!python/tuple
  - 244
  - 322
  '3': !!python/tuple
  - 264
  - 322
  '4': !!python/tuple
  - 279
  - 322
  '5': !!python/tuple
  - 297
  - 322
  '6': !!python/tuple
  - 306
  - 322
  '7': !!python/tuple
  - 322
  - 322
  '8': !!python/tuple
  - 339
  - 322
  '9': !!python/tuple
  - 356
  - 322
  '=': !!python/tuple
  - 407
  - 322
  "\b": !!python/tuple
  - 424
  - 322
_2nd_row:
  '[': !!python/tuple
  - 390
  - 339
  ']': !!python/tuple
  - 407
  - 339
  e: !!python/tuple
  - 270
  - 337
  i: !!python/tuple
  - 342
  - 339
  o: !!python/tuple
  - 357
  - 339
  p: !!python/tuple
  - 373
  - 339
  q: !!python/tuple
  - 235
  - 337
  r: !!python/tuple
  - 287
  - 337
  t: !!python/tuple
  - 304
  - 337
  u: !!python/tuple
  - 323
  - 339
  w: !!python/tuple
  - 252
  - 337
  y: !!python/tuple
  - 307
  - 339
_3rd_row:
  '''': !!python/tuple
  - 395
  - 355
  "\n": !!python/tuple
  - 420
  - 355
  ;: !!python/tuple
  - 377
  - 355
  a: !!python/tuple
  - 237
  - 354
  d: !!python/tuple
  - 273
  - 354
  f: !!python/tuple
  - 290
  - 354
  g: !!python/tuple
  - 308
  - 354
  h: !!python/tuple
  - 307
  - 355
  j: !!python/tuple
  - 326
  - 355
  k: !!python/tuple
  - 343
  - 355
  l: !!python/tuple
  - 360
  - 355
  s: !!python/tuple
  - 256
  - 354
_4th_row:
  ',': !!python/tuple
  - 353
  - 370
  .: !!python/tuple
  - 372
  - 370
  /: !!python/tuple
  - 387
  - 370
  b: !!python/tuple
  - 317
  - 368
  c: !!python/tuple
  - 281
  - 368
  m: !!python/tuple
  - 336
  - 370
  n: !!python/tuple
  - 319
  - 370
  v: !!python/tuple
  - 299
  - 368
  x: !!python/tuple
  - 263
  - 368
  z: !!python/tuple
  - 245
  - 368
_5th_row:
  ' ': !!python/tuple
  - 317
  - 385
aruco_ref:
  angle: 0.0 #1.04
  cx: 543
  cy: 286


Calibration Typing Note:

file keyboard-keyboard_cfg

need to be add manually
for button backspace, enter, space


        # Left Arm
        # self.ly_ws      = None
        # self.lik_xmin, self.lik_xmax        = None, None
        # self.lx_min_a, self.lx_min_b        = None, None
        # self.lx_max_a, self.lx_max_b        = None, None
        # self.lik_ymin_lower, self.lik_ymax_lower = None, None
        # self.lik_ymin_upper, self.lik_ymax_upper = None, None